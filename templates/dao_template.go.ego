<%!func DaoTemplate(w io.Writer, daoData DaoTemplateData) error %>package dao

// GENERATE CODE

import (
	"github.com/kyokomi/goma/goma"
)

// <%= daoData.Name %> is generated <%= daoData.Table.Name %> table.
type <%= daoData.Name %> struct {
	*goma.Goma
}

var <%= daoData.Table.Name %> *<%= daoData.Name %>

// <%= daoData.Table.TitleName %> is <%= daoData.Name %> singleton.
func <%= daoData.Table.TitleName %>(g *goma.Goma) *<%= daoData.Name %> {
	if <%= daoData.Table.Name %> == nil {
		<%= daoData.Table.Name %> = &<%= daoData.Name %>{Goma: g}
	}
	return <%= daoData.Table.Name %>
}

// <%= daoData.EntityName %> is generated <%= daoData.Table.Name %> table.
type <%= daoData.EntityName %> struct {
<% for _, column := range daoData.Table.Columns { %>    <%= column.TitleName %> <%= column.TypeName %>
<% } %>}

func (d *<%= daoData.Name %>) SelectAll() ([]*<%= daoData.EntityName %>, error) {

    queryString := d.QueryArgs("<%= daoData.Table.Name %>", "selectAll", nil)

	var entitys []*<%= daoData.EntityName %>
	rows, err := d.Query(queryString)
	if err != nil {
		return nil, err
	}

	for rows.Next() {
		var entity <%= daoData.EntityName %>
		err = rows.Scan(<% for idx, column := range daoData.Table.Columns { %><% if idx != 0 { %>, <% } %>&entity.<%= column.TitleName %><% } %>)
		if err != nil {
			break
		}

		entitys = append(entitys, &entity)
	}
	if err != nil {
		return nil, err
	}

	return entitys, nil
}

func (d *<%= daoData.Name %>) SelectByID(<% for idx, column := range daoData.Table.Columns { %><% if !column.IsPrimaryKey { %><% continue %><% } %><% if idx != 0 { %>, <% } %><%= column.Name %> <%= column.TypeName %><% } %>) (*<%= daoData.EntityName %>, error) {

    args := goma.QueryArgs{
    <% for _, column := range daoData.Table.Columns { %><% if !column.IsPrimaryKey { %><% continue %><% } %>    "<%= column.Name %>": <%= column.Name %>,
    <% } %>}
	queryString := d.QueryArgs("<%= daoData.Table.Name %>", "selectByID", args)

	var entity <%= daoData.EntityName %>
	err := d.QueryRow(queryString).Scan(<% for idx, column := range daoData.Table.Columns { %><% if idx != 0 { %>, <% } %>&entity.<%= column.TitleName %><% } %>)
	if err != nil {
		return nil, err
	}

	return &entity, nil
}

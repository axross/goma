<%!func DaoTemplate(w io.Writer, daoData DaoTemplateData) error %>package  <%= daoData.DaoPkgName %>

// NOTE: THIS FILE WAS PRODUCED BY THE
// GOMA CODE GENERATION TOOL (github.com/kyokomi/goma)
// DO NOT EDIT

import (
    "log"
    
    "database/sql"
    
    "<%= daoData.EntityImport %>"
    
    "github.com/kyokomi/goma"
)

// <%= daoData.Name %>Queryer is interface
type <%= daoData.Name %>Queryer interface {
	Query(query string, args ...interface{}) (*sql.Rows, error)
	Exec(query string, args ...interface{}) (sql.Result, error)
}

// <%= daoData.Name %> is generated <%= daoData.Table.Name %> table.
type <%= daoData.Name %> struct {
	*sql.DB
	TableName string
}

// Query <%= daoData.Name %> query
func (g <%= daoData.Name %>) Query(query string, args ...interface{}) (*sql.Rows, error) {
	return g.DB.Query(query, args...)
}

// Exec <%= daoData.Name %> exec
func (g <%= daoData.Name %>) Exec(query string, args ...interface{}) (sql.Result, error) {
	return g.DB.Exec(query, args...)
}

var _ <%= daoData.Name %>Queryer = (*<%= daoData.Name %>)(nil)

// <%= daoData.Table.TitleName %> is <%= daoData.Name %>.
func <%= daoData.Table.TitleName %>(db *sql.DB) <%= daoData.Name %> {
    tblDao := <%= daoData.Name %>{}
    tblDao.DB = db
    tblDao.TableName = "<%= daoData.Table.TitleName %>"
	return tblDao
}

// Tx<%= daoData.Name %> is generated <%= daoData.Table.Name %> table transaction.
type Tx<%= daoData.Name %> struct {
	*sql.Tx
	TableName string
}

// Query Tx<%= daoData.Name %> query
func (g Tx<%= daoData.Name %>) Query(query string, args ...interface{}) (*sql.Rows, error) {
	return g.Tx.Query(query, args...)
}

// Exec Tx<%= daoData.Name %> exec
func (g Tx<%= daoData.Name %>) Exec(query string, args ...interface{}) (sql.Result, error) {
	return g.Tx.Exec(query, args...)
}

var _ <%= daoData.Name %>Queryer = (*Tx<%= daoData.Name %>)(nil)

// Tx<%= daoData.Table.TitleName %> is <%= daoData.Name %>.
func Tx<%= daoData.Table.TitleName %>(tx *sql.Tx) Tx<%= daoData.Name %> {
    tblDao := Tx<%= daoData.Name %>{}
    tblDao.Tx = tx
    tblDao.TableName = "<%= daoData.Table.TitleName %>"
	return tblDao
}

// SelectAll select <%= daoData.Table.Name %> table all recode.
func (g <%= daoData.Name %>) SelectAll() ([]<%= daoData.EntityPkgName %>.<%= daoData.EntityName %>, error) {
	return _<%= daoData.Table.TitleName %>SelectAll(g)
}

// SelectAll transaction select <%= daoData.Table.Name %> table all recode.
func (g Tx<%= daoData.Name %>) SelectAll() ([]<%= daoData.EntityPkgName %>.<%= daoData.EntityName %>, error) {
	return _<%= daoData.Table.TitleName %>SelectAll(g)
}

func _<%= daoData.Table.TitleName %>SelectAll(g <%= daoData.Name %>Queryer) ([]<%= daoData.EntityPkgName %>.<%= daoData.EntityName %>, error) {
    queryString := queryArgs("<%= daoData.Table.Name %>", "selectAll", nil)

	var es []<%= daoData.EntityPkgName %>.<%= daoData.EntityName %>
	rows, err := g.Query(queryString)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

    if !rows.Next() {
		return nil, sql.ErrNoRows
	}

	for rows.Next() {
		var e <%= daoData.EntityPkgName %>.<%= daoData.EntityName %>
		if err := e.Scan(rows); err != nil {
			break
		}

		es = append(es, e)
	}
	if err != nil {
	    log.Println(err, queryString)
		return nil, err
	}

	return es, nil
}

// SelectByID select <%= daoData.Table.Name %> table by primaryKey.
func (g <%= daoData.Name %>) SelectByID(<% for idx, column := range daoData.Table.Columns { %><% if !column.IsPrimaryKey { %><% continue %><% } %><% if idx != 0 { %>, <% } %><%= column.Name %> <%= column.TypeName %><% } %>) (<%= daoData.EntityPkgName %>.<%= daoData.EntityName %>, error) {
	return _<%= daoData.Table.TitleName %>SelectByID(g, <% for idx, column := range daoData.Table.Columns { %><% if !column.IsPrimaryKey { %><% continue %><% } %><% if idx != 0 { %>, <% } %><%= column.Name %><% } %>)
}

// SelectByID transaction select <%= daoData.Table.Name %> table by primaryKey.
func (g Tx<%= daoData.Name %>) SelectByID(<% for idx, column := range daoData.Table.Columns { %><% if !column.IsPrimaryKey { %><% continue %><% } %><% if idx != 0 { %>, <% } %><%= column.Name %> <%= column.TypeName %><% } %>) (<%= daoData.EntityPkgName %>.<%= daoData.EntityName %>, error) {
	return _<%= daoData.Table.TitleName %>SelectByID(g, <% for idx, column := range daoData.Table.Columns { %><% if !column.IsPrimaryKey { %><% continue %><% } %><% if idx != 0 { %>, <% } %><%= column.Name %><% } %>)
}

func _<%= daoData.Table.TitleName %>SelectByID(g <%= daoData.Name %>Queryer, <% for idx, column := range daoData.Table.Columns { %><% if !column.IsPrimaryKey { %><% continue %><% } %><% if idx != 0 { %>, <% } %><%= column.Name %> <%= column.TypeName %><% } %>) (<%= daoData.EntityPkgName %>.<%= daoData.EntityName %>, error) {
    args := goma.QueryArgs{
    <% for _, column := range daoData.Table.Columns { %><% if !column.IsPrimaryKey { %><% continue %><% } %>    "<%= column.Name %>": <%= column.Name %>,
    <% } %>}
	queryString := queryArgs("<%= daoData.Table.Name %>", "selectByID", args)

	rows, err := g.Query(queryString)
	if err != nil {
		return <%= daoData.EntityPkgName %>.<%= daoData.EntityName %>{}, err
	}
	defer rows.Close()

    if !rows.Next() {
		return <%= daoData.EntityPkgName %>.<%= daoData.EntityName %>{}, sql.ErrNoRows
	}

	var e <%= daoData.EntityPkgName %>.<%= daoData.EntityName %>
	if err := e.Scan(rows); err != nil {
	    log.Println(err, queryString)
		return <%= daoData.EntityPkgName %>.<%= daoData.EntityName %>{}, err
	}
	
	return e, nil
}

// Insert insert <%= daoData.Table.Name %> table.
func (g <%= daoData.Name %>) Insert(entity <%= daoData.EntityPkgName %>.<%= daoData.EntityName %>) (sql.Result, error) {
	return _<%= daoData.Table.TitleName %>Insert(g, entity)
}

// Insert transaction insert <%= daoData.Table.Name %> table.
func (g Tx<%= daoData.Name %>) Insert(entity <%= daoData.EntityPkgName %>.<%= daoData.EntityName %>) (sql.Result, error) {
	return _<%= daoData.Table.TitleName %>Insert(g, entity)
}

func _<%= daoData.Table.TitleName %>Insert(g <%= daoData.Name %>Queryer, entity <%= daoData.EntityPkgName %>.<%= daoData.EntityName %>) (sql.Result, error) {
	args := goma.QueryArgs{
    <% for _, column := range daoData.Table.Columns { %>  "<%= column.Name %>": entity.<%= column.TitleName %>,
    <% } %>
	}
	queryString := queryArgs("<%= daoData.Table.Name %>", "insert", args)
	
	result, err := g.Exec(queryString)
    if err != nil {
        log.Println(err, queryString)
    }
    return result, err
}

// Update update <%= daoData.Table.Name %> table.
func (g <%= daoData.Name %>) Update(entity <%= daoData.EntityPkgName %>.<%= daoData.EntityName %>) (sql.Result, error) {
	return _<%= daoData.Table.TitleName %>Update(g, entity)
}

// Update transaction update <%= daoData.Table.Name %> table.
func (g Tx<%= daoData.Name %>) Update(entity <%= daoData.EntityPkgName %>.<%= daoData.EntityName %>) (sql.Result, error) {
	return _<%= daoData.Table.TitleName %>Update(g, entity)
}

// Update update <%= daoData.Table.Name %> table.
func _<%= daoData.Table.TitleName %>Update(g <%= daoData.Name %>Queryer, entity <%= daoData.EntityPkgName %>.<%= daoData.EntityName %>) (sql.Result, error) {
	args := goma.QueryArgs{
	<% for _, column := range daoData.Table.Columns { %>  "<%= column.Name %>": entity.<%= column.TitleName %>,
    <% } %>
	}
	queryString := queryArgs("<%= daoData.Table.Name %>", "update", args)

	result, err := g.Exec(queryString)
	if err != nil {
        log.Println(err, queryString)
    }
    return result, err
}

// Delete delete <%= daoData.Table.Name %> table.
func (g <%= daoData.Name %>) Delete(<% for idx, column := range daoData.Table.Columns { %><% if !column.IsPrimaryKey { %><% continue %><% } %><% if idx != 0 { %>, <% } %><%= column.Name %> <%= column.TypeName %><% } %>) (sql.Result, error) {
	return _<%= daoData.Table.TitleName %>Delete(g, <% for idx, column := range daoData.Table.Columns { %><% if !column.IsPrimaryKey { %><% continue %><% } %><% if idx != 0 { %>, <% } %><%= column.Name %><% } %>)
}

// Delete transaction delete <%= daoData.Table.Name %> table.
func (g Tx<%= daoData.Name %>) Delete(<% for idx, column := range daoData.Table.Columns { %><% if !column.IsPrimaryKey { %><% continue %><% } %><% if idx != 0 { %>, <% } %><%= column.Name %> <%= column.TypeName %><% } %>) (sql.Result, error) {
	return _<%= daoData.Table.TitleName %>Delete(g, <% for idx, column := range daoData.Table.Columns { %><% if !column.IsPrimaryKey { %><% continue %><% } %><% if idx != 0 { %>, <% } %><%= column.Name %><% } %>)
}

// Delete delete <%= daoData.Table.Name %> table by primaryKey.
func _<%= daoData.Table.TitleName %>Delete(g <%= daoData.Name %>Queryer, <% for idx, column := range daoData.Table.Columns { %><% if !column.IsPrimaryKey { %><% continue %><% } %><% if idx != 0 { %>, <% } %><%= column.Name %> <%= column.TypeName %><% } %>) (sql.Result, error) {
    args := goma.QueryArgs{
    <% for _, column := range daoData.Table.Columns { %><% if !column.IsPrimaryKey { %><% continue %><% } %>    "<%= column.Name %>": <%= column.Name %>,
    <% } %>}
	queryString := queryArgs("<%= daoData.Table.Name %>", "delete", args)

    result, err := g.Exec(queryString)
	if err != nil {
        log.Println(err, queryString)
    }
    return result, err
}
